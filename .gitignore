# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
.idea/# C extensions
*.so

docs/git-ignored-folder/required-articles.md


# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# PyPI configuration file
.pypirc

# Custom project-specific ignored files
docs/git-ignored-folder/
docs/git-ignored-folder/required-articles.md
docs/git-ignored-folder/lit-review-instructions.md

# Generated code
llm-pipeline/generated-code/
llm-pipeline/backend/generated-code/

# SEE artifacts
see-methods/02-enhanced-oss-see/0-artifacts/sdee_lite_description_vectorized-large.sql
see-methods/02-enhanced-oss-see/0-artifacts/sdee_lite_description_vectorized.sql
see-methods/02-enhanced-oss-see/04-vectorizing-description-field/sdee_lite_description_vectorized.sql
see-methods/02-enhanced-oss-see/04-vectorizing-description-field/sdee_lite_description_cleaned.sql
see-methods/02-enhanced-oss-see/04-vectorizing-description-field/sdee_lite_description_cleaned_old.sql
see-methods/02-enhanced-oss-see/05-minimal-dataset/sdee_lite_description_vectorized.sql
see-methods/02-enhanced-oss-see/06-using-sbert-similarity-to-get-repositories/sdee_lite_description_vectorized.sql
see-methods/02-enhanced-oss-see/07-test-sbert/sdee_lite_description_vectorized.sql
see-methods/02-enhanced-oss-see/07-test-sbert/sdee_lite_description_vectorized-large.sql
see-methods/02-enhanced-oss-see/0-artifacts/old/sdee_lite_description_vectorized-large.sql
/llm-pipeline/backend/sbert_complexity_estimator/DELETE_ME/
llm-pipeline/backend/sbert_complexity_estimator/DELETE_ME/sbert_complexity_combined.py